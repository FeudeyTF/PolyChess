using PolyChessTGBot.Bot.Commands;
using PolyChessTGBot.Lichess.Types.Arena;
using PolyChessTGBot.Lichess.Types.Swiss;
using PolyChessTGBot.Logs;
using System.Reflection;
using File = System.IO.File;

namespace PolyChessTGBot.Bot.BotCommands
{
    public partial class BotCommands
    {
        public static readonly string TempPath;

        private static List<ArenaTournament> TournamentsList;

        private static List<SwissTournament> SwissTournamentsList;

        static BotCommands()
        {
            TempPath = Path.Combine(Environment.CurrentDirectory, "Temp");
            TournamentsList = [];
            SwissTournamentsList = [];
        }

        public static async Task LoadTournaments()
        {
            if (DateTime.TryParse(Program.MainConfig.TournamentScoresDate, out var date))
            {
                Program.Logger.Write($"–°–æ–±–∏—Ä–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –æ—Ç {date:g}...", LogType.Info);
                var tournamentsPath = Path.Combine(Environment.CurrentDirectory, "Tournaments");
                if (!Directory.Exists(tournamentsPath))
                    Directory.CreateDirectory(tournamentsPath);

                var swissPath = Path.Combine(Environment.CurrentDirectory, "SwissTournaments");
                if (!Directory.Exists(swissPath))
                    Directory.CreateDirectory(swissPath);

                foreach (var filePath in Directory.GetFiles(tournamentsPath))
                {
                    var tournament = await Program.Lichess.GetTournament(Path.GetFileName(filePath)[..^4]);
                    if (tournament != null && tournament.StartDate > date)
                        TournamentsList.Add(tournament);
                }

                foreach (var filePath in Directory.GetFiles(swissPath))
                {
                    var tournament = await Program.Lichess.GetSwissTournament(Path.GetFileName(filePath)[..^4]);
                    if (tournament != null && tournament.Started > date)
                        SwissTournamentsList.Add(tournament);
                }
                TournamentsList = [.. from r in TournamentsList orderby r.StartDate descending select r];
                SwissTournamentsList = [.. from r in SwissTournamentsList orderby r.Started descending select r];
                Program.Logger.Write($"–ù–∞–π–¥–µ–Ω–æ {TournamentsList.Count} —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ {SwissTournamentsList.Count} —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ —à–≤–µ–π—Ü–∞—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ!", LogType.Info);
            }
            else
                Program.Logger.Write("–î–∞—Ç–∞ 'TournamentScoresDate' –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ –±—ã–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!", LogType.Error);
        }

        [Command("version", "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ", true)]
        public async Task Version(CommandArgs args)
        {
            string exeFilePath = Path.Combine(
                Environment.CurrentDirectory,
                Assembly.GetExecutingAssembly().GetName().Name + ".exe");
            List<string> message =
            [
                "üõ†<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>üõ†",
                $"üë®üèª‚Äçüíª<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> {Program.MainConfig.BotAuthor}",
                $"üîÄ<b>–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:</b> v.{Program.Version}",
                $"üïê<b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {File.GetLastWriteTime(exeFilePath):g}",
                $"‚è±<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {DateTime.Now - Program.Started:%d' –¥–Ω. '%h' —á. '%m' –º–∏–Ω. '%s' —Å–µ–∫.'}"
            ];
            await args.Reply(string.Join("\n", message));
        }
        private struct User(long telegramID, string name, string lichessName, long year)
        {
            public long TelegramID = telegramID;

            public string Name = name;

            public string LichessName = lichessName;

            public long Year = year;

            public override readonly string ToString()
            {
                return $"{Name} '{LichessName}' ({TelegramID}), –ö—É—Ä—Å - {Year}";
            }
        }
    }
}