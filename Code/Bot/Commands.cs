using PolyChessTGBot.Bot.Buttons;
using PolyChessTGBot.Bot.Commands;
using PolyChessTGBot.Bot.Messages;
using PolyChessTGBot.Database;
using PolyChessTGBot.Externsions;
using PolyChessTGBot.Lichess.Types.Arena;
using System.Reflection;
using System.Text;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;
using File = System.IO.File;

namespace PolyChessTGBot.Bot
{
    public class BotCommands
    {
        public static readonly string TempPath;

        internal readonly ListMessage<FAQEntry> FAQMessage;

        internal readonly ListMessage<HelpLink> HelpMessage;

        internal readonly ListMessage<HelpLink> HelpAdmin;

        internal readonly ListMessage<FAQEntry> FAQAdmin;

        private readonly List<FAQEntry> FAQEntries;

        private readonly List<HelpLink> HelpLinks;

        private Tuple<int, int> DivisionC = new(0, 1300);

        private Tuple<int, int> DivisionB = new(1301, 1800);

        private Tuple<int, int> DivisionA = new(1801, 2100);

        static BotCommands()
        {
            TempPath = Path.Combine(Environment.CurrentDirectory, "Temp");
        }

        public BotCommands()
        {
            FAQMessage = new("FAQ", GetFAQValues, ConvertFAQEntryToString)
            {
                Header = "‚ùì<b>FAQ</b> —à–∞—Ö–º–∞—Ç‚ùì –í—Å–µ —Å–∞–º—ã–µ <b>—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ</b> –≤–æ–ø—Ä–æ—Å—ã —Å–æ–±—Ä–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ:"
            };

            HelpMessage = new("Help", GetHelpLinksValue, ConvertHelpLinkToString, 1, false, "–î–∞–ª–µ–µ ‚û°Ô∏è", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            {
                GetDocumentID = GetHelpLinkDocumentID
            };

            FAQAdmin = new("adminFAQ", GetFAQValues, ConvertFAQEntryToString, 1, additionalKeyboards: [[new("üóë–£–¥–∞–ª–∏—Ç—å", "Delete", HandleFAQDelete)]]);

            HelpAdmin = new("adminHelp", GetHelpLinksValue, ConvertHelpLinkToString, 1, false, "–î–∞–ª–µ–µ ‚û°Ô∏è", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", [[new("üóë–£–¥–∞–ª–∏—Ç—å", "Delete", HandleHelpLinkDelete)]])
            {
                GetDocumentID = GetHelpLinkDocumentID
            };

            FAQEntries = Program.Data.GetFAQEntries();
            HelpLinks = Program.Data.GetHelpLinks();
        }

        [Command("version", "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ", true)]
        public async Task Version(CommandArgs args)
        {
            string exeFilePath = Path.Combine(
                Environment.CurrentDirectory,
                Assembly.GetExecutingAssembly().GetName().Name + ".exe");
            List<string> message =
            [
                "üõ†<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>üõ†",
                $"üë®üèª‚Äçüíª<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> {Program.MainConfig.BotAuthor}",
                $"üîÄ<b>–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:</b> v.{Program.Version}",
                $"üïê<b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {File.GetLastAccessTime(exeFilePath):g}",
                $"‚è±<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {(DateTime.Now - Program.Started).ToString("%d' –¥–Ω. '%h' —á. '%m' –º–∏–Ω. '%s' —Å–µ–∫.'")}"
            ];
            await args.Reply(string.Join("\n", message));
        }

        [Command("question", "–°–∏–Ω—Ç–∞–∫—Å–∏—Å: /question \"–≤–æ–ø—Ä–æ—Å\". –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –ü–∞–≤–ª—É", true)]
        public async Task Question(CommandArgs args)
        {
            string question = string.Join(" ", args.Parameters);
            if (!string.IsNullOrEmpty(question))
            {
                List<string> text =
                [
                    "<b><u>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</u></b>üôã‚Äç",
                    $"üë§<b>–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{args.User.Username}",
                    $"üë§<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {args.User.FirstName} {args.User.LastName}",
                    $"üïë<b>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {args.Message.Date:G}",
                    $"‚ùì<b>–í–æ–ø—Ä–æ—Å:</b>\n{question}"
                ];
                InlineKeyboardButton button = new("–î–∞–Ω–Ω—ã–µ");
                button.SetData("QuestionDataID", ("ID", args.User.Id), ("ChannelID", args.Message.MessageId));
                var message = new TelegramMessageBuilder(string.Join("\n", text))
                    .AddButton(button);
                await args.Bot.SendMessage(message, Program.MainConfig.QuestionChannel);
                await args.Reply("–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
            }
            else
                await args.Reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –≤–æ–ø—Ä–æ—Å!");
        }

        [Command("help", "–í—ã–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏", true)]
        private async Task SendHelpLinks(CommandArgs args)
        {
            await HelpMessage.Send(args.Bot, args.Message.Chat.Id);
        }

        [Command("savearena", "–í—ã–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏", admin: true)]
        private async Task SaveArena(CommandArgs args)
        {
            if (args.Parameters.Count == 1)
            {
                var tournamentId = args.Parameters[0];
                var tournament = await Program.Lichess.GetTournament(tournamentId);
                var tournamentSheet = await Program.Lichess.GetTournamentSheet(tournamentId, true);
                if (tournament != null && tournamentSheet != null)
                {
                    var directory = Path.Combine(Environment.CurrentDirectory, "Tournaments");
                    if (!Directory.Exists(directory))
                        Directory.CreateDirectory(directory);

                    await Program.Lichess.SaveTournamentSheet(tournamentId, Path.Combine(directory, tournamentId + ".txt"), true);
                    await args.Reply($"–¢—É—Ä–Ω–∏—Ä <b>{tournament.FullName}</b> –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");
                }
                else
                    await args.Reply("–¢—É—Ä–Ω–∏—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!");
            }
            else
                await args.Reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /savearena \"ID —Ç—É—Ä–Ω–∏—Ä–∞\"");
        }

        [Command("arenaresult", "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", admin: true)]
        private async Task GenerateTournamentTable(CommandArgs args)
        {
            if (args.Parameters.Count > 0)
            {
                var tournamentId = args.Parameters[0];
                var tournament = await Program.Lichess.GetTournament(tournamentId);

                var directory = Path.Combine(Environment.CurrentDirectory, "Tournaments");
                if (!Directory.Exists(directory))
                    Directory.CreateDirectory(directory);
                var filePath = Path.Combine(directory, tournamentId + ".txt");
                if (File.Exists(filePath))
                {
                    var tournamentSheet = await Program.Lichess.GetTournamentSheet(File.OpenText(filePath));
                    if (args.Parameters.Count > 1)
                    {
                        var stringsToExclude= args.Parameters[1..].Select(p => p.Split(','));
                        List<string> exclude = [];
                        foreach (var str in stringsToExclude)
                            foreach (var str2 in str)
                                if(!string.IsNullOrEmpty(str2.Trim()))
                                    exclude.Add(str2.Trim());
                        tournamentSheet = tournamentSheet.Except(tournamentSheet.Where(e => exclude.Contains(e.Username))).ToList();
                    }
                    if (tournament != null && tournamentSheet != null)
                    {
                        List<string> csv = ["–ò–º—è;–ù–∏–∫ Lichess;–ë–∞–ª–ª"];
                        List<string> text = [
                            $"–¢—É—Ä–Ω–∏—Ä <b>{tournament.FullName}</b>. –°–æ—Å—Ç–æ—è–ª—Å—è <b>{tournament.Started:g}</b>",
                            $"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"
                        ];
                        using var reader = Program.Data.SelectQuery($"SELECT * FROM Users");
                        Dictionary<string, User?> users = [];
                        while (reader.Read())
                            if (!string.IsNullOrEmpty(reader.Get("LichessName")))
                                users.Add(reader.Get("LichessName"), new(reader.Get<long>("TelegramID"), reader.Get("Name"), reader.Get("LichessName"), reader.Get<int>("Year")));

                        Dictionary<int, List<SheetEntry>> playersInDivision = new()
                        {
                            { 1, [] }, // Division A
                            { 2, [] }, // Division B
                            { 3, [] }  // Division C
                        };

                        foreach (var entry in tournamentSheet)
                        {
                            if(entry.Rating >= DivisionC.Item1 && entry.Rating <= DivisionC.Item2)
                            {
                                if(playersInDivision[3].Count < 3)
                                    playersInDivision[3].Add(entry);
                            }
                            else if (entry.Rating >= DivisionB.Item1 && entry.Rating <= DivisionB.Item2)
                            {
                                if (playersInDivision[2].Count < 3)
                                    playersInDivision[2].Add(entry);
                            }
                            else if (entry.Rating >= DivisionA.Item1 && entry.Rating <= DivisionA.Item2)
                            {
                                if (playersInDivision[1].Count < 3)
                                    playersInDivision[1].Add(entry);
                            }
                        }

                        for(int i = 1; i < 4; i++)
                        {
                            char divisionLetter = i == 1 ? 'A' : i == 2 ? 'B' : 'C';
                            text.Add($"–ò–≥—Ä–æ–∫–∏ –¥–∏–≤–∏–∑–∏–æ–Ω–∞ <b>{divisionLetter}</b>:");
                            foreach(var entry in playersInDivision[i])
                                text.Add($"<b> - {entry.Rank}) {entry.Username}</b>. –†–µ–π—Ç–∏–Ω–≥: {entry.Rating}");
                        }
                        text.Add("");
                        text.Add("<b>–û—Å—Ç–∞–ª—å–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –±–∞–ª–ª—ã –∑–∞ —Ç—É—Ä–Ω–∏—Ä:</b>");
                        text.Add("");
                        foreach (var entry in tournamentSheet)
                        {
                            bool inDivision = false;
                            for(int i = 1; i < 4; i++)
                                if (playersInDivision[i].Contains(entry))
                                {
                                    inDivision = true;
                                    break;
                                }
                            if(entry.Sheet != null)
                            {
                                int totalScore = -1;
                                int zeroNumbers = entry.Sheet.Scores.Count(c => c == '0');
                                int twoNumbers = entry.Sheet.Scores.Count(c => c == '2');
                                int fourNumbers = entry.Sheet.Scores.Count(c => c == '4');
                                int total = zeroNumbers + twoNumbers + fourNumbers;
                                string studentName = "–ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
                                if (users.TryGetValue(entry.Username, out User? student) && student.HasValue)
                                    studentName = student.Value.Name;

                                if (inDivision)
                                    totalScore = 1;
                                else if (total >= 7 && twoNumbers >= 1)
                                    totalScore = 0;
                                
                                if(totalScore != -1)
                                    csv.Add($"{studentName};{entry.Username};{totalScore}");
                                text.Add($"<b>{entry.Rank}) {entry.Username}</b>, {studentName}. –ë–∞–ª–ª: {(totalScore == -1 ? "-" : totalScore)}");
                            }
                        }

                        TelegramMessageBuilder message = "–§–∞–π–ª —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤";
                        if (!Directory.Exists(TempPath))
                            Directory.CreateDirectory(TempPath);
                        var csvFilePath = Path.Combine(TempPath, tournament.ID + "result.csv");
                        if (File.Exists(csvFilePath))
                            File.Delete(csvFilePath);
                        using (var streamWriter = new StreamWriter(File.Create(csvFilePath), Encoding.UTF8))
                        {
                            foreach (var entry in csv)
                                streamWriter.WriteLine(entry);
                            streamWriter.Close();
                        }
                        using var stream = File.Open(csvFilePath, FileMode.Open);
                        message.WithFile(stream, "Table.csv");
                        await args.Reply(string.Join('\n', text));
                        await args.Reply(message);
                    }
                    else
                        await args.Reply("–¢—É—Ä–Ω–∏—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!");
                }
                else
                    await args.Reply("–¢—É—Ä–Ω–∏—Ä –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /savearena!");
            }
            else
                await args.Reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /arenaresult \"ID —Ç—É—Ä–Ω–∏—Ä–∞\"");
        }

        [Command("getplayerscore", "–ü–æ–º–æ–≥–∞–µ—Ç —É–∑–Ω–∞—Ç—å, –ø—Ä–æ—à—ë–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ç—É—Ä–Ω–∏—Ä", admin: true)]
        private async Task GetPlayerScore(CommandArgs args)
        {
            if (args.Parameters.Count == 2)
            {
                var tournamentId = args.Parameters[0];
                var name = args.Parameters[1];

                var tournament = await Program.Lichess.GetTournament(tournamentId); 
                
                var directory = Path.Combine(Environment.CurrentDirectory, "Tournaments");
                if (!Directory.Exists(directory))
                    Directory.CreateDirectory(directory);
                var filePath = Path.Combine(directory, tournamentId + ".txt");
                if (File.Exists(filePath))
                {
                    var tournamentSheet = await Program.Lichess.GetTournamentSheet(File.OpenText(filePath)); 
                    if (tournament != null && tournamentSheet != null)
                    {
                        using var reader = Program.Data.SelectQuery($"SELECT * FROM Users WHERE Name='{name}'");
                        Lichess.Types.User? lichessUser = null;
                        if (reader.Read())
                        {
                            lichessUser = await Program.Lichess.GetUserAsync(reader.Get("LichessName"));
                        }
                        else
                            lichessUser = await Program.Lichess.GetUserAsync(name);
                        if (lichessUser != null)
                        {
                            foreach (var player in tournamentSheet)
                            {
                                if (player.Sheet != null && player.Username == lichessUser.Username)
                                {
                                    List<string> text = [
                                        $"–¢—É—Ä–Ω–∏—Ä <b>{tournament.FullName}</b>. –°–æ—Å—Ç–æ—è–ª—Å—è <b>{tournament.Started:g}</b>",
                                        $"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞ <b>{player.Username}</b>:",
                                        $"<b>–†–∞–Ω–≥:</b> {player.Rank}",
                                        $"<b>–ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤:</b> {player.Score}",
                                        $"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞:</b> {player.Sheet.Scores}",
                                        ];

                                    if(player.Team != null)
                                    {
                                        var team = await Program.Lichess.GetTeamAsync(player.Team);
                                        if (team != null)
                                            text.Add($"<b>–ö–æ–º–∞–Ω–¥–∞:</b> {team.Name}");
                                    }

                                    int zeroNumbers = player.Sheet.Scores.Count(c => c == '0');
                                    int twoNumbers = player.Sheet.Scores.Count(c => c == '2');
                                    int fourNumbers = player.Sheet.Scores.Count(c => c == '4');
                                    int total = zeroNumbers + twoNumbers + fourNumbers;
                                    if (total >= 7 && twoNumbers >= 1)
                                    {
                                        text.Add("–ü–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫ <b>—É—á–∞—Å—Ç–≤–æ–≤–∞–ª</b> –≤ —Ç—É—Ä–Ω–∏—Ä–µ");
                                    }
                                    else
                                    {
                                        text.Add("–ü–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫ <b>–Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª</b> –≤ —Ç—É—Ä–Ω–∏—Ä–µ");
                                    }
                                    TelegramMessageBuilder message = string.Join('\n', text);
                                    InlineKeyboardButton playerInfo = new($"üîç–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ {lichessUser.Username}");
                                    playerInfo.SetData("UserInfo", ("Name", lichessUser.Username));
                                    message.AddButton(playerInfo);
                                    await args.Reply(message);
                                    return;
                                }
                            }
                            await args.Reply($"–£—á–µ–Ω–∏–∫ {name} –Ω–µ —É—á–∞—Å—Ç–æ–≤–∞–ª –≤ —Ç—É—Ä–Ω–∏—Ä–µ");
                        }
                        else
                            await args.Reply("–ê–∫–∫–∞—É–Ω—Ç Lichess –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                    }
                    else
                        await args.Reply("–¢—É—Ä–Ω–∏—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω!");
                }
                else
                    await args.Reply("–¢—É—Ä–Ω–∏—Ä –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /savearena!");
            }
            else
                await args.Reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /getplayerscore \"ID —Ç—É—Ä–Ω–∏—Ä–∞\" \"–ù–∏–∫ —É—á–µ–Ω–∏–∫–∞\"");
        }


        [Command("admin", "–†–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏", admin: true)]
        private async Task AdminHelpLinks(CommandArgs args)
        {
            if (args.Parameters.Count > 0)
            {
                var adminType = args.Parameters[0].ToLower();
                if (adminType.StartsWith('f'))
                    await FAQAdmin.Send(args.Bot, args.Message.Chat.Id);
                else if (adminType.StartsWith('h'))
                    await HelpAdmin.Send(args.Bot, args.Message.Chat.Id);
                else
                    await args.Reply("–ü–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /admin faq/helplinks");
            }
            else
                await args.Reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /admin faq/helplinks");
        }

        private async Task HandleHelpLinkDelete(ButtonInteractArgs args, List<HelpLink> links)
        {
            if (links.Count != 0)
            {
                var link = links[0];
                HelpLinks.Remove(link);
                Program.Data.Query("DELETE FROM HelpLinks WHERE ID=@0", link.ID);
                if (args.Query.Message != null)
                {
                    await args.Bot.DeleteMessageAsync(args.Query.Message.Chat.Id, args.Query.Message.MessageId);
                    await args.Bot.SendMessage("–ü–æ–ª–µ–∑–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", args.Query.Message.Chat.Id);
                }
            }
            else
                await args.Reply("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫!");
        }

        private async Task HandleFAQDelete(ButtonInteractArgs args, List<FAQEntry> links)
        {
            if (links.Count != 0)
            {
                var link = links[0];
                FAQEntries.Remove(link);
                Program.Data.Query("DELETE FROM FAQ WHERE ID=@0", link.ID);
                if (args.Query.Message != null)
                {
                    await args.Bot.DeleteMessageAsync(args.Query.Message.Chat.Id, args.Query.Message.MessageId);
                    await args.Bot.SendMessage("–í–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", args.Query.Message.Chat.Id);
                }
            }
            else
                await args.Reply("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤!");
        }

        private List<HelpLink> GetHelpLinksValue() => HelpLinks;

        private string ConvertHelpLinkToString(HelpLink link, int index)
        {
            return $"<b>{link.Title}</b>\n{link.Text}\n<i>{link.Footer}</i>";
        }

        private string? GetHelpLinkDocumentID(HelpLink link) => link.FileID;

        [Command("fileinfo", "–í—ã–¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ", admin: true)]
        public async Task GetFileInfo(CommandArgs args)
        {
            if (args.Message.ReplyToMessage != null)
            {
                DocumentInfo? documentInfo = null;
                if (args.Message.ReplyToMessage.Document != null)
                {
                    var document = args.Message.ReplyToMessage.Document;
                    documentInfo = new(document.FileName, document.FileSize, document.FileId, document.FileUniqueId);
                }
                else if (args.Message.ReplyToMessage.Video != null)
                {
                    var document = args.Message.ReplyToMessage.Video;
                    documentInfo = new(document.FileName, document.FileSize, document.FileId, document.FileUniqueId);
                }
                else if (args.Message.ReplyToMessage.Photo != null && args.Message.ReplyToMessage.Photo.Length > 0)
                {
                    var photo = args.Message.ReplyToMessage.Photo.First();
                    documentInfo = new("Noname", photo.FileSize, photo.FileId, photo.FileUniqueId);
                }

                if (documentInfo.HasValue)
                {
                    string message = $"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ '{documentInfo.Value.FileName}'\n";
                    message += $"–ò–º—è: {documentInfo.Value.FileName}\n";
                    message += $"–†–∞–∑–º–µ—Ä: {documentInfo.Value.FileSize}\n";
                    message += $"Unique ID: {documentInfo.Value.FileUniqueId}\n";
                    message += $"File ID: {documentInfo.Value.FileID}";
                    await args.Reply(message);
                }
                else
                    await args.Reply("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º!");
            }
            else
                await args.Reply("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º!");
        }

        private struct DocumentInfo(string? fileName, long? fileSize, string fileID, string fileUniqueID)
        {
            public string? FileName = fileName;

            public long? FileSize = fileSize;

            public string FileID = fileID;

            public string FileUniqueId = fileUniqueID;
        }

        [Command("faq", "–í—ã–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Å FAQ", true)]
        public async Task FAQ(CommandArgs args)
        {
            await FAQMessage.Send(args.Bot, args.Message.Chat.Id);
        }

        private List<FAQEntry> GetFAQValues() => FAQEntries;

        private string ConvertFAQEntryToString(FAQEntry entry, int index)
        {
            return $"{index + 1}) <b>{entry.Question}</b>\n - {entry.Answer}";
        }

        [Command("addfaq", "–°–æ–∑–¥–∞—ë—Ç —á–∞—Å—Ç–æ–∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å", admin: true)]
        public async Task AddFAQ(CommandArgs args)
        {
            if (args.Parameters.Count == 2)
            {
                FAQEntry entry = new(default, args.Parameters[0], args.Parameters[1]);
                string text = "INSERT INTO FAQ (Question, Answer) VALUES (@0, @1);";
                int id = Program.Data.QueryScalar<int>(text + "SELECT CAST(last_insert_rowid() as INT);", entry.Question, entry.Answer);
                entry.ID = id;
                FAQEntries.Add(entry);
                await args.Reply($"–í–æ–ø—Ä–æ—Å <b>{entry.Question}</b> –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ <b>{entry.Answer}</b> –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
            }
            else
                await args.Reply("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /addFAQ \"–≤–æ–ø—Ä–æ—Å\" \"–æ—Ç–≤–µ—Ç\"");
        }

        [Command("addhelp", "–°–æ–∑–¥–∞—ë—Ç —á–∞—Å—Ç–æ–∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å", admin: true)]
        public async Task AddHelpLink(CommandArgs args)
        {
            if (args.Parameters.Count == 2)
            {
                if (args.Message.Document != null)
                {
                    HelpLink link = new(default, args.Parameters[0], args.Parameters[1], "", args.Message.Document.FileId);
                    string text = "INSERT INTO HelpLinks (Title, Text, Footer, FileID) VALUES (@0, @1, @2, @3);";
                    int id = Program.Data.QueryScalar<int>(text + "SELECT CAST(last_insert_rowid() as INT);", link.Title, link.Text, link.Footer, link.FileID == null ? DBNull.Value : link.FileID);
                    link.ID = id;
                    HelpLinks.Add(link);
                    await args.Reply($"–ü–æ–ª–µ–∑–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
                }
                else
                    await args.Reply("–ö –ø–æ–ª–µ–∑–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª! –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ –∫ —Å–æ–æ–±—â–µ–∏—é —Å –∫–æ–º–∞–Ω–¥–æ–π");
            }
            else
                await args.Reply("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /addhelp \"–Ω–∞–∑–≤–∞–Ω–∏–µ\" \"—Ç–µ–∫—Å—Ç\". –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª - –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∫–æ–º–∞–Ω–¥–æ–π");
        }

        [Command("cstats", "–ü–æ–∫–∞–∂–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞", admin: true)]
        public async Task Stats(CommandArgs args)
        {
            await args.Reply($"–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞: {args.Message.Chat.Id}");
        }

        [Command("users", "–ü–æ–∫–∞–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", admin: true)]
        public async Task GetUsers(CommandArgs args)
        {
            List<User> users = [];
            using var reader = Program.Data.SelectQuery("SELECT * FROM Users");
            while (reader.Read())
                users.Add(new(reader.Get<long>("TelegramID"), reader.Get("Name"), reader.Get("LichessName"), reader.Get<int>("Year")));
            await args.Reply($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {string.Join("\n", users)}");
        }

        [Command("userinfo", "–ü–æ–∫–∞–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", admin: true)]
        public async Task GetUserInfo(CommandArgs args)
        {
            if (args.Parameters.Count > 0)
            {
                string name = string.Join(" ", args.Parameters);
                using var reader = Program.Data.SelectQuery($"SELECT * FROM Users WHERE Name='{name}'");
                if (reader.Read())
                {
                    var lichessUser = await Program.Lichess.GetUserAsync(reader.Get("LichessName"));

                    if (lichessUser != null)
                    {
                        TelegramMessageBuilder message = await GenerateUserInfo(lichessUser);
                        message.Text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ <b>{name}</b>\n" + message.Text;
                        await args.Reply(message);
                    }
                    else
                        await args.Reply("–ê–∫–∫–∞—É–Ω—Ç Lichess –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                }
                else
                    await args.Reply("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            else
                await args.Reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /userinfo \"–Ω–∏–∫\"");
        }

        [Button("TeamInfo")]
        internal async Task SendTeamInfo(ButtonInteractArgs args)
        {
            var teamID = args.Get<string>("ID");
            if (!string.IsNullOrEmpty(teamID))
            {
                var team = await Program.Lichess.GetTeamAsync(teamID);
                if (team != null)
                {
                    List<string> text = 
                        [
                            $"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ <b>{team.Name}</b>",
                            "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>",
                            team.Description,
                            $"<b>–¢–∏–ø:</b> {(team.Open ? "–û—Ç–∫—Ä—ã—Ç–∞—è" : "–ó–∞–∫—Ä—ã—Ç–∞—è")}",
                            $"<b>–õ–∏–¥–µ—Ä:</b> {team.Leader.Name}",
                            "<i><b>–û—Å—Ç–∞–ª—å–Ω—ã–µ –ª–∏–¥–µ—Ä—ã</b></i>",
                        ];
                    if (team.Leaders.Count > 0)
                    {
                        foreach (var leader in team.Leaders)
                            text.Add($" - <b>{leader.Name}</b>");
                    }
                    else
                        text.Add(" - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");

                    TelegramMessageBuilder message = string.Join("\n", text);
                    message.WithoutWebPagePreview();
                    InlineKeyboardButton leaderInfo = new($"üîç–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ—Ä–µ {team.Leader.Name}");
                    leaderInfo.SetData("UserInfo", ("Name", team.Leader.Name));
                    message.AddButton(leaderInfo);

                    await args.Reply(message);
                }
                else
                    await args.Reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            }
            else
                await args.Reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        }

        [Button("UserInfo")]
        internal async Task SendUserInfo(ButtonInteractArgs args)
        {
            var name = args.Get<string>("Name");
            if (!string.IsNullOrEmpty(name))
            {
                var lichessUser = await Program.Lichess.GetUserAsync(name);
                if (lichessUser != null)
                    await args.Reply(await GenerateUserInfo(lichessUser));
                else
                    await args.Reply("–ê–∫–∫–∞—É–Ω—Ç Lichess –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
            else
                await args.Reply("–ê–∫–∫–∞—É–Ω—Ç Lichess –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }

        private async Task<TelegramMessageBuilder> GenerateUserInfo(Lichess.Types.User user)
        {
            var teams = await Program.Lichess.GetUserTeamsAsync(user.Username);
            TelegramMessageBuilder message = new();
            List<string> text = 
                [
                    $"<b>–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ Lichess:</b> {user.Username}",
                    $"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.RegisterDate:g}",
                    $"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> {user.LastSeenDate:g}",
                    $"<b>–ö–æ–º–∞–Ω–¥—ã:</b> {user.LastSeenDate:g}",
                    "<i><b>–ö–æ–º–∞–Ω–¥—ã</b></i>",
                ];

            if (teams.Count > 0)
            {
                foreach (var team in teams)
                {
                    text.Add($" - <b>{team.Name} ({team.MembersCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)</b>");
                    InlineKeyboardButton teamInfo = new($"üë•{team.Name}");
                    teamInfo.SetData("TeamInfo", ("ID", team.ID));
                    message.AddButton(teamInfo);
                }
            }
            else
                text.Add(" - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
            text.Add("<i><b>–†–µ–π—Ç–∏–Ω–≥–∏</b></i>");
            foreach (var perfomance in user.Perfomance)
                text.Add($" - <b>{perfomance.Key.Beautify()}</b>, –°—ã–≥—Ä–∞–Ω–æ: {perfomance.Value.Games}, –†–µ–π—Ç–∏–Ω–≥: {perfomance.Value.Rating}");
            message.WithText(string.Join("\n", text));
            InlineKeyboardButton accountLinkButton =
              new("‚ôüLichess –ø—Ä–æ—Ñ–∏–ª—å")
              {
                  Url = user.URL
              };
            message.AddButton(accountLinkButton);
            message.WithoutWebPagePreview();
            return message;
        }

        private struct User(long telegramID, string name, string lichessName, long year)
        {
            public long TelegramID = telegramID;

            public string Name = name;

            public string LichessName = lichessName;

            public long Year = year;

            public override readonly string ToString()
            {
                return $"{Name} '{LichessName}' ({TelegramID}), –ö—É—Ä—Å - {Year}";
            }
        }
    }
}