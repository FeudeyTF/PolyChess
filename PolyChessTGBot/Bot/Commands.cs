using PolyChessTGBot.Bot.Buttons;
using PolyChessTGBot.Bot.Commands;
using PolyChessTGBot.Bot.Messages;
using PolyChessTGBot.Database;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace PolyChessTGBot.Bot
{
    public class BotCommands
    {
        internal readonly ListMessage<FAQEntry> FAQMessage;

        internal readonly ListMessage<HelpLink> HelpMessage;

        private readonly List<FAQEntry> FAQEntries;

        private readonly List<HelpLink> HelpLinks;

        public BotCommands()
        {
            FAQMessage = new("FAQ", GetFAQValues, ConvertFAQEntryToString)
            {
                Header = "‚ùì<b>FAQ</b> —à–∞—Ö–º–∞—Ç‚ùì –í—Å–µ —Å–∞–º—ã–µ <b>—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ</b> –≤–æ–ø—Ä–æ—Å—ã —Å–æ–±—Ä–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ:"
            };

            HelpMessage = new("Help", GetHelpLinksValue, ConvertHelpLinkToString, 1, false, "–î–∞–ª–µ–µ ‚û°Ô∏è", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            {
                GetDocumentID = GetHelpLinkDocumentID
            };

            FAQEntries = Program.Data.GetFAQEntries();
            HelpLinks = Program.Data.GetHelpLinks();
        }

        [Command("version", "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ", true)]
        public async Task Version(CommandArgs args)
        {
            List<string> message =
            [
                "üõ†<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>üõ†",
                $"üë®üèª‚Äçüíª<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> {Program.MainConfig.BotAuthor}",
                $"üîÄ<b>–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:</b> v.{Program.Version}",
                $"üïê<b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                $"‚è±<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {(DateTime.Now - Program.Started).ToString(@"%d' –¥–Ω. '%m' –º–∏–Ω. '%s' —Å–µ–∫.'")}"
            ];
            await args.Reply(string.Join("\n", message), parseMode: ParseMode.Html);
        }

        [Command("question", "–°–∏–Ω—Ç–∞–∫—Å–∏—Å: /question \"–≤–æ–ø—Ä–æ—Å\". –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –ü–∞–≤–ª—É", true)]
        public async Task Question(CommandArgs args)
        {
            string question = string.Join(" ", args.Parameters);
            if (!string.IsNullOrEmpty(question))
            {
                List<string> message =
                [
                    "<b><u>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</u></b>üôã‚Äç",
                    $"üë§<b>–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{args.User.Username}",
                    $"üë§<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {args.User.FirstName} {args.User.LastName}",
                    $"üïë<b>–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {args.Message.Date:G}",
                    $"‚ùì<b>–í–æ–ø—Ä–æ—Å:</b>\n{question}"
                ];
                var data = TelegramButtonData.GetDataString("QuestionDataID", ("ID", args.User.Id), ("ChannelID", args.Message.MessageId));
                InlineKeyboardMarkup uesrInfo = new(new InlineKeyboardButton("–î–∞–Ω–Ω—ã–µ") { CallbackData = data });
                await args.Bot.SendTextMessageAsync(Program.MainConfig.QuestionChannel, string.Join("\n", message).RemoveBadSymbols(), parseMode: ParseMode.Html, replyMarkup: uesrInfo);
                await args.Reply("–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
            }
            else
                await args.Reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –≤–æ–ø—Ä–æ—Å!");
        }

        [Command("help", "–í—ã–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏", true)]
        public async Task SendHelpLinks(CommandArgs args)
        {
            await HelpMessage.Send(args.Bot, args.Message.Chat.Id);
        }

        private List<HelpLink> GetHelpLinksValue() => HelpLinks;

        private string ConvertHelpLinkToString(HelpLink link, int index)
        {
            return $"<b>{link.Title}</b>\n{link.Text}\n<i>{link.Footer}</i>";
        }

        private string? GetHelpLinkDocumentID(HelpLink link) => link.FileID;

        [Command("fileinfo", "–í—ã–¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")]
        public async Task GetFileInfo(CommandArgs args)
        {
            if (args.Message.ReplyToMessage != null)
            {
                DocumentInfo? documentInfo = null;
                if (args.Message.ReplyToMessage.Document != null)
                {
                    var document = args.Message.ReplyToMessage.Document;
                    documentInfo = new(document.FileName, document.FileSize, document.FileId, document.FileUniqueId);
                }
                else if (args.Message.ReplyToMessage.Video != null)
                {
                    var document = args.Message.ReplyToMessage.Video;
                    documentInfo = new(document.FileName, document.FileSize, document.FileId, document.FileUniqueId);
                }

                if(documentInfo.HasValue)
                {
                    string message = $"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ '{documentInfo.Value.FileName}'\n";
                    message += $"–ò–º—è: {documentInfo.Value.FileName}\n";
                    message += $"–†–∞–∑–º–µ—Ä: {documentInfo.Value.FileSize}\n";
                    message += $"Unique ID: {documentInfo.Value.FileUniqueId}\n";
                    message += $"File ID: {documentInfo.Value.FileID}";
                    await args.Reply(message);
                }
                else
                    await args.Reply("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º!");
            }
            else
                await args.Reply("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º!");
        }

        private struct DocumentInfo(string? fileName, long? fileSize, string fileID, string fileUniqueID)
        {
            public string? FileName = fileName;

            public long? FileSize = fileSize;

            public string FileID = fileID;

            public string FileUniqueId = fileUniqueID;
        }

        [Command("faq", "–í—ã–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Å FAQ", true)]
        public async Task FAQ(CommandArgs args)
        {
            await FAQMessage.Send(args.Bot, args.Message.Chat.Id);
        }

        private List<FAQEntry> GetFAQValues() => FAQEntries;

        private string ConvertFAQEntryToString(FAQEntry entry, int index)
        {
            return $"{index + 1}) <b>{entry.Question}</b>\n - {entry.Answer}";
        }

        [Command("addfaq", "–°–æ–∑–¥–∞—ë—Ç —á–∞—Å—Ç–æ–∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å")]
        public async Task AddFAQ(CommandArgs args)
        {
            if (args.Parameters.Count == 2)
            {
                FAQEntry entry = new(default, args.Parameters[0], args.Parameters[1]);
                string text = "INSERT INTO FAQ (Question, Answer) VALUES (@0, @1);";
                int id = Program.Data.QueryScalar<int>(text + "SELECT CAST(last_insert_rowid() as INT);", entry.Question, entry.Answer);
                entry.ID = id;
                FAQEntries.Add(entry);
                await args.Reply($"–í–æ–ø—Ä–æ—Å <b>{entry.Question}</b> –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ <b>{entry.Answer}</b> –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", parseMode: ParseMode.Html);
            }
            else
                await args.Reply("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /addFAQ \"–≤–æ–ø—Ä–æ—Å\" \"–æ—Ç–≤–µ—Ç\"");
        }

        [Command("cstats", "–ü–æ–∫–∞–∂–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞")]
        public async Task Stats(CommandArgs args)
        {
            await args.Reply($"–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞: {args.Message.Chat.Id}");
        }

        [Command("users", "–ü–æ–∫–∞–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")]
        public async Task GetUsers(CommandArgs args)
        {
            List<User> users = [];
            using var reader = Program.Data.SelectQuery("SELECT * FROM Users");
            while (reader.Read())
                users.Add(new(reader.Get<int>("TelegramID"), reader.Get("Name"), reader.Get<int>("Year")));
            await args.Reply($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {string.Join("\n", users)}");
        }

        private struct User(long telegramID, string name, long year)
        {
            public long TelegramID = telegramID;

            public string Name = name;

            public long Year = year;

            public override string ToString()
            {
                return $"{Name} ({TelegramID}), –ö—É—Ä—Å - {Year}";
            }
        }
    }
}