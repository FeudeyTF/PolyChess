using PolyChessTGBot.Bot.Buttons;
using PolyChessTGBot.Bot.Commands;
using PolyChessTGBot.Bot.Messages;
using PolyChessTGBot.Database;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace PolyChessTGBot
{
    public class BotCommands
    {
        internal readonly ListMessage<FAQEntry> FAQMessage;

        public BotCommands()
        {
            FAQMessage = new("FAQ", GetValues, ProccessString)
            {
                Header = "‚ùì<b>FAQ</b> —à–∞—Ö–º–∞—Ç‚ùì –í—Å–µ —Å–∞–º—ã–µ <b>—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ</b> –≤–æ–ø—Ä–æ—Å—ã —Å–æ–±—Ä–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ:"
            };
        }

        [Command("question", "–°–∏–Ω—Ç–∞–∫—Å–∏—Å: /question \"–≤–æ–ø—Ä–æ—Å\". –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –ü–∞–≤–ª—É", visible: true)]
        public async Task Question(CommandArgs args)
        {
            string question = string.Join(" ", args.Parameters);
            if (!string.IsNullOrEmpty(question))
            {
                List<string> message = new()
                {
                    "**__–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!__**üôã‚Äç‚ôÇÔ∏è",
                    $"üë§**–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** @{args.User.Username}",
                    $"üë§**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {args.User.FirstName} {args.User.LastName}",
                    $"üïë**–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:** {args.Message.Date:G}",
                    $"‚ùì**–í–æ–ø—Ä–æ—Å:**\n{question}"
                };
                var data = TelegramButtonData.GetDataString("QuestionDataID", ("ID", args.User.Id), ("ChannelID", args.Message.MessageId));
                InlineKeyboardMarkup uesrInfo = new(new InlineKeyboardButton("–î–∞–Ω–Ω—ã–µ") { CallbackData = data });
                await args.Bot.SendTextMessageAsync(Program.MainConfig.QuestionChannel, string.Join("\n", message).RemoveBadSymbols(), parseMode: ParseMode.MarkdownV2, replyMarkup: uesrInfo);
                await args.Reply("–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
            }
            else
                await args.Reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –≤–æ–ø—Ä–æ—Å!");
        }

        [Command("FAQ", "–í—ã–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Å FAQ", visible: true)]
        public async Task FAQ(CommandArgs args)
        {
            await FAQMessage.Send(args.Bot, args.Message.Chat.Id);
        }

        private List<FAQEntry> GetValues()
        {
            using var reader = Program.Data.SelectQuery("SELECT * FROM FAQ");
            List<FAQEntry> questions = new();
            while (reader.Read())
                questions.Add(new(reader.Get("Question"), reader.Get("Answer")));
            return questions;
        }

        private string ProccessString(FAQEntry entry, int index)
        {
            return $"{index + 1}) <b>{entry.Question}</b>\n - {entry.Answer}";
        }

        [Command("addfaq", "–°–æ–∑–¥–∞—ë—Ç —á–∞—Å—Ç–æ–∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å")]
        public async Task AddFAQ(CommandArgs args)
        {
            if (args.Parameters.Count == 2)
            {
                var question = args.Parameters[0];
                var answer = args.Parameters[1];
                Program.Data.Query("INSERT INTO FAQ (Question, Answer) VALUES (@0, @1)", question, answer);
                await args.Reply($"–í–æ–ø—Ä–æ—Å <b>{question}</b> –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ <b>{answer}</b> –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", parseMode: ParseMode.Html);
            }
            else
                await args.Reply("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /addFAQ \"–≤–æ–ø—Ä–æ—Å\" \"–æ—Ç–≤–µ—Ç\"");
        }

        [Command("cstats", "–ü–æ–∫–∞–∂–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞")]
        public async Task Stats(CommandArgs args)
        {
            await args.Reply($"–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞: {args.Message.Chat.Id}");
        }

        [Command("users", "–ü–æ–∫–∞–∂–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞")]
        public async Task GetUsers(CommandArgs args)
        {
            List<User> users = new();
            using var reader = Program.Data.SelectQuery("SELECT * FROM Users");
            while (reader.Read())
                users.Add(new(reader.Get<int>("TelegramID"), reader.Get("Name"), reader.Get<int>("Year")));
            await args.Reply($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {string.Join("\n", users)}");
        }

        private struct User
        {
            public long TelegramID;

            public string Name;

            public long Year;

            public User(long telegramID, string name, long year)
            {
                TelegramID = telegramID;
                Name = name;
                Year = year;
            }

            public override string ToString()
            {
                return $"{Name} ({TelegramID}), –ö—É—Ä—Å - {Year}";
            }
        }
    }
}